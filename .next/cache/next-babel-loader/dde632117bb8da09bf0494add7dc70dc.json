{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aplchian/Documents/code/buda-next/components/EditCard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { createStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { Checkbox } from '@material-ui/core';\nimport { pathOr, propOr, trim } from 'ramda';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useTranslation } from 'react-i18next';\nimport { Formik } from 'formik';\nimport LanguageOptions from './LanguageOptions';\nimport { connect } from 'react-redux';\nimport { addNote, removeNote, updateImageValue } from '../../buda/src/redux/actions/manifest';\n\nvar styles = function styles(theme) {\n  return createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2)\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500]\n    }\n  });\n};\n\nvar DialogTitle = withStyles(styles)(function (props) {\n  var children = props.children,\n      classes = props.classes,\n      onClose = props.onClose,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"onClose\"]);\n\n  return /*#__PURE__*/_jsxDEV(MuiDialogTitle, _objectSpread(_objectSpread({\n    disableTypography: true,\n    className: classes.root\n  }, other), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, _this), onClose ? /*#__PURE__*/_jsxDEV(IconButton, {\n      \"aria-label\": \"close\",\n      className: classes.closeButton,\n      onClick: onClose,\n      children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }, _this) : null]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }, _this);\n});\nvar DialogActions = withStyles(function (theme) {\n  return {\n    root: {\n      margin: 0,\n      padding: theme.spacing(1)\n    }\n  };\n})(MuiDialogActions);\n\nfunction EditCard(props) {\n  _s();\n\n  var _this2 = this;\n\n  var handleClose = function handleClose() {\n    props.setEditDialogOpen(false);\n  };\n\n  var data = props.data;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      onClose: handleClose,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: props.open,\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        onClose: handleClose,\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [t('Edit-image'), \" \", data.filename || data.type]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-1/2\",\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              style: {\n                display: 'block'\n              },\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: !!data.thumbnailForVolume,\n                onChange: function onChange() {\n                  props.dispatch(updateImageValue(props.idx, 'thumbnailForVolume', !data.thumbnailForVolume));\n                },\n                value: \"input-whole-margin\",\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 37\n              }, this),\n              label: t('Thumbnail for Volume')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Formik, {\n              initialValues: {\n                specialLabel: pathOr('', ['specialLabel', '@value'], data),\n                language: props.uiLanguage\n              },\n              onSubmit: function onSubmit(_ref, _ref2) {\n                var specialLabel = _ref.specialLabel,\n                    language = _ref.language;\n                var resetForm = _ref2.resetForm;\n                props.dispatch(updateImageValue(props.idx, 'specialLabel', {\n                  '@value': trim(specialLabel),\n                  '@language': language\n                }));\n                resetForm();\n              },\n              enableReinitialize: true,\n              children: function children(_ref3) {\n                var values = _ref3.values,\n                    handleChange = _ref3.handleChange,\n                    handleSubmit = _ref3.handleSubmit;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"w-full flex mb-6\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"w-1/2\",\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      label: t('Special Label'),\n                      type: \"text\",\n                      onChange: function onChange(e) {\n                        handleChange(e);\n                      },\n                      onBlur: function onBlur() {\n                        setTimeout(handleSubmit, 500);\n                      },\n                      value: values.specialLabel,\n                      inputProps: {\n                        id: 'specialLabel'\n                      },\n                      id: \"specialLabel\" // onBlur={() => handleSubmit()}\n                      ,\n                      style: {\n                        width: '100%'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 45\n                    }, _this2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 41\n                  }, _this2), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"w-1/2 pl-8\",\n                    children: /*#__PURE__*/_jsxDEV(FormControl, {\n                      style: {\n                        width: '100%'\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                        shrink: true,\n                        children: t('Language')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 180,\n                        columnNumber: 49\n                      }, _this2), /*#__PURE__*/_jsxDEV(Select, {\n                        \"native\": true,\n                        value: values.language,\n                        onChange: handleChange,\n                        id: \"specialLabel-language\",\n                        inputProps: {\n                          id: 'language'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(LanguageOptions, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 192,\n                          columnNumber: 53\n                        }, _this2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 183,\n                        columnNumber: 49\n                      }, _this2)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 45\n                    }, _this2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 41\n                  }, _this2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 37\n                }, _this2);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full flex mb-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-1/2 flex flex-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-2/3\",\n              children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                style: {\n                  display: 'block'\n                },\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: !!data.belongsToVolume,\n                  onChange: function onChange(e) {\n                    props.dispatch(updateImageValue(props.idx, 'belongsToVolume', !data.belongsToVolume));\n                  },\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 41\n                }, this),\n                label: t('Belongs to vol')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-1/3\",\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                label: t('Volume Id'),\n                type: \"text\",\n                defaultValue: data.belongsToVolId,\n                onBlur: function onBlur(e) {\n                  props.dispatch(updateImageValue(props.idx, 'belongsToVolId', e.target.value));\n                },\n                style: {\n                  width: '100%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full my-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-2/4\",\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                shrink: true,\n                children: t('Page Side')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: data.pageSide || '',\n                onChange: function onChange(e) {\n                  props.dispatch(updateImageValue(props.idx, 'pageSide', e.target.value));\n                },\n                \"native\": true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"left\",\n                  children: t('left')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"right\",\n                  children: t('right')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"recto\",\n                  children: t('recto')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"verso\",\n                  children: t('verso')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full flex mb-6 flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"block\",\n            children: t('Notes')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              note: '',\n              language: props.uiLanguage\n            },\n            onSubmit: function onSubmit(_ref4, _ref5) {\n              var note = _ref4.note,\n                  language = _ref4.language;\n              var resetForm = _ref5.resetForm;\n              props.dispatch(addNote(props.idx, {\n                '@value': trim(note),\n                '@language': language\n              }));\n              resetForm();\n            },\n            enableReinitialize: true,\n            children: function children(_ref6) {\n              var values = _ref6.values,\n                  handleChange = _ref6.handleChange,\n                  handleSubmit = _ref6.handleSubmit;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-full\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex flex-row w-1/2\",\n                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                    label: ' ',\n                    value: values.note,\n                    onChange: handleChange,\n                    style: {\n                      width: '50%'\n                    },\n                    inputProps: {\n                      id: 'note'\n                    },\n                    rows: 2,\n                    id: \"note\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 41\n                  }, _this2), /*#__PURE__*/_jsxDEV(FormControl, {\n                    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                      shrink: true,\n                      children: \"''\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 45\n                    }, _this2), /*#__PURE__*/_jsxDEV(Select, {\n                      \"native\": true,\n                      value: values.language,\n                      onChange: handleChange,\n                      id: \"note-language\",\n                      inputProps: {\n                        id: 'language'\n                      },\n                      children: /*#__PURE__*/_jsxDEV(LanguageOptions, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 314,\n                        columnNumber: 49\n                      }, _this2)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 305,\n                      columnNumber: 45\n                    }, _this2)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 41\n                  }, _this2), /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: function onClick() {\n                      return handleSubmit();\n                    },\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      className: \"self-center cursor-pointer\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 318,\n                      columnNumber: 45\n                    }, _this2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 41\n                  }, _this2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 37\n                }, _this2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 33\n              }, _this2);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            children: propOr([], 'note', data).map(function (note, i) {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                button: true,\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                    onClick: function onClick() {\n                      props.dispatch(removeNote(props.idx, i));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 41\n                  }, _this2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 37\n                }, _this2), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: note['@value'],\n                  secondary: note['@language']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 37\n                }, _this2)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 33\n              }, _this2);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          autoFocus: true,\n          onClick: handleClose,\n          color: \"primary\",\n          children: t('OK')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditCard, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = EditCard;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nexport default connect(mapStateToProps)(EditCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/Users/aplchian/Documents/code/buda-next/components/EditCard.tsx"],"names":["React","createStyles","withStyles","Button","Dialog","MuiDialogTitle","MuiDialogActions","IconButton","CloseIcon","Typography","Checkbox","pathOr","propOr","trim","List","ListItem","ListItemIcon","ListItemText","FormControlLabel","TextField","FormControl","InputLabel","Select","AddIcon","useTranslation","Formik","LanguageOptions","connect","addNote","removeNote","updateImageValue","styles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","DialogTitle","props","children","classes","onClose","other","DialogActions","EditCard","handleClose","setEditDialogOpen","data","t","open","filename","type","display","thumbnailForVolume","dispatch","idx","specialLabel","language","uiLanguage","resetForm","values","handleChange","handleSubmit","e","setTimeout","id","width","belongsToVolume","belongsToVolId","target","value","pageSide","note","map","i","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { createStyles, Theme, withStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\nimport MuiDialogActions from '@material-ui/core/DialogActions'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Typography from '@material-ui/core/Typography'\nimport { Checkbox } from '@material-ui/core'\nimport { pathOr, propOr, trim } from 'ramda'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport TextField from '@material-ui/core/TextField'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport AddIcon from '@material-ui/icons/Add'\nimport { useTranslation } from 'react-i18next'\nimport { Formik } from 'formik'\nimport LanguageOptions from './LanguageOptions'\nimport { connect } from 'react-redux'\nimport { addNote, removeNote, updateImageValue } from '../../buda/src/redux/actions/manifest'\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        root: {\n            margin: 0,\n            padding: theme.spacing(2),\n        },\n        closeButton: {\n            position: 'absolute',\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500],\n        },\n    })\n\nconst DialogTitle = withStyles(styles)(\n    (props: { children: React.ReactElement; classes: any; onClose: any }) => {\n        const { children, classes, onClose, ...other } = props\n        return (\n            <MuiDialogTitle\n                disableTypography\n                className={classes.root}\n                {...other}\n            >\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton\n                        aria-label=\"close\"\n                        className={classes.closeButton}\n                        onClick={onClose}\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        )\n    }\n)\n\nconst DialogActions = withStyles(theme => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions)\n\nfunction EditCard(props: {\n    setEditDialogOpen: any\n    data: any\n    open: boolean\n    uiLanguage: any\n    dispatch: any\n    idx: number\n}) {\n    const handleClose = () => {\n        props.setEditDialogOpen(false)\n    }\n\n    const { data } = props\n    const { t } = useTranslation()\n\n    return (\n        <div>\n            <Dialog\n                onClose={handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={props.open}\n                fullWidth\n            >\n                <DialogTitle onClose={handleClose}>\n                    <>\n                        {t('Edit-image')} {data.filename || data.type}\n                    </>\n                </DialogTitle>\n                <div className=\"p-3\">\n                    <div className=\"w-full\">\n                        <div className=\"w-1/2\">\n                            <FormControlLabel\n                                style={{ display: 'block' }}\n                                control={\n                                    <Checkbox\n                                        checked={!!data.thumbnailForVolume}\n                                        onChange={() => {\n                                            props.dispatch(\n                                                updateImageValue(\n                                                    props.idx,\n                                                    'thumbnailForVolume',\n                                                    !data.thumbnailForVolume\n                                                )\n                                            )\n                                        }}\n                                        value=\"input-whole-margin\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={t('Thumbnail for Volume')}\n                            />\n\n                            <Formik\n                                initialValues={{\n                                    specialLabel: pathOr(\n                                        '',\n                                        ['specialLabel', '@value'],\n                                        data\n                                    ),\n                                    language: props.uiLanguage,\n                                }}\n                                onSubmit={(\n                                    { specialLabel, language },\n                                    { resetForm }\n                                ) => {\n                                    props.dispatch(\n                                        updateImageValue(\n                                            props.idx,\n                                            'specialLabel',\n                                            {\n                                                '@value': trim(specialLabel),\n                                                '@language': language,\n                                            }\n                                        )\n                                    )\n                                    resetForm()\n                                }}\n                                enableReinitialize\n                            >\n                                {({ values, handleChange, handleSubmit }) => (\n                                    <div className=\"w-full flex mb-6\">\n                                        <div className=\"w-1/2\">\n                                            <TextField\n                                                label={t('Special Label')}\n                                                type=\"text\"\n                                                onChange={e => {\n                                                    handleChange(e)\n                                                }}\n                                                onBlur={() => {\n                                                    setTimeout(\n                                                        handleSubmit,\n                                                        500\n                                                    )\n                                                }}\n                                                value={values.specialLabel}\n                                                inputProps={{\n                                                    id: 'specialLabel',\n                                                }}\n                                                id=\"specialLabel\"\n                                                // onBlur={() => handleSubmit()}\n                                                style={{ width: '100%' }}\n                                            />\n                                        </div>\n                                        <div className=\"w-1/2 pl-8\">\n                                            <FormControl\n                                                style={{ width: '100%' }}\n                                            >\n                                                <InputLabel shrink>\n                                                    {t('Language')}\n                                                </InputLabel>\n                                                <Select\n                                                    native\n                                                    value={values.language}\n                                                    onChange={handleChange}\n                                                    id=\"specialLabel-language\"\n                                                    inputProps={{\n                                                        id: 'language',\n                                                    }}\n                                                >\n                                                    <LanguageOptions />\n                                                </Select>\n                                            </FormControl>\n                                        </div>\n                                    </div>\n                                )}\n                            </Formik>\n                        </div>\n                    </div>\n\n                    <div className=\"w-full flex mb-6\">\n                        <div className=\"w-1/2 flex flex-row\">\n                            <div className=\"w-2/3\">\n                                <FormControlLabel\n                                    style={{ display: 'block' }}\n                                    control={\n                                        <Checkbox\n                                            checked={!!data.belongsToVolume}\n                                            onChange={e => {\n                                                props.dispatch(\n                                                    updateImageValue(\n                                                        props.idx,\n                                                        'belongsToVolume',\n                                                        !data.belongsToVolume\n                                                    )\n                                                )\n                                            }}\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label={t('Belongs to vol')}\n                                />\n                            </div>\n                            <div className=\"w-1/3\">\n                                <TextField\n                                    label={t('Volume Id')}\n                                    type=\"text\"\n                                    defaultValue={data.belongsToVolId}\n                                    onBlur={e => {\n                                        props.dispatch(\n                                            updateImageValue(\n                                                props.idx,\n                                                'belongsToVolId',\n                                                e.target.value\n                                            )\n                                        )\n                                    }}\n                                    style={{ width: '100%' }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"w-full my-4\">\n                        <div className=\"w-2/4\">\n                            <FormControl style={{ width: '100%' }}>\n                                <InputLabel shrink>{t('Page Side')}</InputLabel>\n                                <Select\n                                    value={data.pageSide || ''}\n                                    onChange={e => {\n                                        props.dispatch(\n                                            updateImageValue(\n                                                props.idx,\n                                                'pageSide',\n                                                e.target.value\n                                            )\n                                        )\n                                    }}\n                                    native\n                                >\n                                    <option value=\"\"></option>\n                                    <option value=\"left\">{t('left')}</option>\n                                    <option value=\"right\">{t('right')}</option>\n                                    <option value=\"recto\">{t('recto')}</option>\n                                    <option value=\"verso\">{t('verso')}</option>\n                                </Select>\n                            </FormControl>\n                        </div>\n                    </div>\n                    <div className=\"w-full flex mb-6 flex-col\">\n                        <h3 className=\"block\">{t('Notes')}</h3>\n\n                        <Formik\n                            initialValues={{\n                                note: '',\n                                language: props.uiLanguage,\n                            }}\n                            onSubmit={({ note, language }, { resetForm }) => {\n                                props.dispatch(\n                                    addNote(props.idx, {\n                                        '@value': trim(note),\n                                        '@language': language,\n                                    })\n                                )\n                                resetForm()\n                            }}\n                            enableReinitialize\n                        >\n                            {({ values, handleChange, handleSubmit }) => (\n                                <div className=\"w-full\">\n                                    <div className=\"flex flex-row w-1/2\">\n                                        <TextField\n                                            label={' '}\n                                            value={values.note}\n                                            onChange={handleChange}\n                                            style={{ width: '50%' }}\n                                            inputProps={{\n                                                id: 'note',\n                                            }}\n                                            rows={2}\n                                            id=\"note\"\n                                        />\n                                        <FormControl>\n                                            <InputLabel shrink>''</InputLabel>\n                                            <Select\n                                                native\n                                                value={values.language}\n                                                onChange={handleChange}\n                                                id=\"note-language\"\n                                                inputProps={{\n                                                    id: 'language',\n                                                }}\n                                            >\n                                                <LanguageOptions />\n                                            </Select>\n                                        </FormControl>\n                                        <div onClick={() => handleSubmit()}>\n                                            <AddIcon className=\"self-center cursor-pointer\" />\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                        </Formik>\n\n                        <List>\n                            {/*\n                             // @ts-ignore */}\n                            {propOr([], 'note', data).map((note, i) => (\n                                <ListItem key={i} button>\n                                    <ListItemIcon>\n                                        <CloseIcon\n                                            onClick={() => {\n                                                props.dispatch(\n                                                    removeNote(props.idx, i)\n                                                )\n                                            }}\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText\n                                        primary={note['@value']}\n                                        secondary={note['@language']}\n                                    />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </div>\n                </div>\n                <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                        {t('OK')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nconst mapStateToProps = function(state: any) {\n    return {}\n}\n\nexport default connect(mapStateToProps)(EditCard)\n"]},"metadata":{},"sourceType":"module"}