{"ast":null,"code":"import { addIndex, always, append, assoc, compose, curry, dec, dissoc, findIndex, inc, insert, intersection, lensPath, map, prop, propEq, propOr, reduce, reject, remove, set, view, when } from 'ramda';\nimport uuidv4 from 'uuid/v4';\nimport getPagination from '../../utils/pagination-prediction';\nimport { getComparator } from '../../utils/pagination-comparators';\nconst mapIndex = addIndex(map);\nconst imageListLens = lensPath(['view', 'view1', 'imagelist']);\n\nconst getImageList = manifest => {\n  return view(imageListLens, manifest) || [];\n};\n\nexport default ((manifest = {\n  'default-view': 'view1',\n  imggroup: '',\n  'spec-version': '',\n  'viewing-direction': '',\n  'volume-label': [],\n  attribution: [],\n  changes: [],\n  note: [],\n  pagination: [],\n  rev: '',\n  status: '',\n  view: {\n    view1: {\n      imagelist: []\n    }\n  },\n  isDefault: true,\n  volumeData: {\n    defaultLanguage: 'en'\n  },\n  appData: {\n    bvmt: {\n      'default-ui-string-lang': 'en'\n    }\n  }\n}, action) => {\n  const updateImage = (idx, fn) => {\n    const imageList = getImageList(manifest);\n    const image = imageList[idx];\n    imageList[idx] = fn(image);\n    return set(imageListLens, imageList, manifest);\n  };\n\n  switch (action.type) {\n    case 'SET_MANIFEST':\n      return action.payload.manifest;\n\n    case 'SET_UI_LANGUAGE':\n      return set(lensPath(['appData', 'bvmt', 'default-ui-string-lang']), action.payload, manifest);\n\n    case 'UPDATE_IMAGE_VALUE':\n      return updateImage(action.payload.idx, image => assoc(action.payload.key, action.payload.value, image));\n\n    case 'HIDE_CARD_IN_MANIFEST':\n      {\n        return updateImage(action.payload.idx, image => compose(assoc('collapsed', action.payload.hide), // @ts-ignore\n        assoc('hide', action.payload.hide) // @ts-ignore\n        )(image));\n      }\n\n    case 'REMOVE_OF_FIELD':\n      return updateImage(action.payload.idx, image => dissoc(action.payload.ofField, image));\n\n    case 'ADD_NOTE':\n      return updateImage(action.payload.idx, image => {\n        const updatedNotes = append(action.payload.note, propOr([], 'note', image));\n        return assoc('note', updatedNotes, image);\n      });\n\n    case 'UPDATE_IMAGE_SECTION':\n      return updateImage(action.payload.idx, image => {\n        const sectionLens = lensPath(['pagination', manifest.pagination[0].id, action.payload.key]);\n        return set(sectionLens, action.payload.value, image);\n      });\n\n    case 'TOGGLE_REVIEW':\n      return updateImage(action.payload.idx, image => {\n        const reviewed = prop('reviewed', image);\n        return compose(image => !reviewed ? assoc('collapsed', true, image) : image, assoc('reviewed', !reviewed))(image);\n      });\n\n    case 'UPDATE_OF_FIELD':\n      return updateImage(action.payload.idx, image => assoc(action.payload.key, action.payload.val.name, image));\n\n    case 'INSERT_MISSING':\n      const defaultMissingImage = {\n        id: uuidv4(),\n        type: 'missing'\n      };\n      var updateImageList9;\n\n      if (action.payload.direction === 'before') {\n        updateImageList9 = insert(action.payload.i, defaultMissingImage, getImageList(manifest));\n      } else if (action.payload.direction === 'after') {\n        updateImageList9 = insert(action.payload.i + 1, defaultMissingImage, getImageList(manifest));\n      }\n\n      return set(imageListLens, updateImageList9, manifest);\n\n    case 'TOGGLE_COLLAPSE_IMAGE':\n      return updateImage(action.payload.idx, image => {\n        const hidden = !!prop('collapsed', image);\n        return assoc('collapsed', !hidden, image);\n      });\n\n    case 'SET_IMAGE_VIEW':\n      return set(lensPath(['appData', 'bvmt', 'preview-image-view']), action.payload.value, manifest);\n\n    case 'ADD_IMAGE_TAG':\n      return updateImage(action.payload.idx, image => {\n        const duplicateTags = ['T0018', 'T0017'];\n        const detailTags = ['T0016'];\n        const currentTags = propOr([], 'tags', image);\n        const prevTagsHaveDuplicates = intersection(currentTags, duplicateTags).length > 0;\n        const prevTagsHaveDetail = intersection(currentTags, detailTags).length > 0;\n        const newTagsHaveDuplicates = intersection(action.payload.tags, duplicateTags).length > 0;\n        const newTagsHaveDetail = intersection(action.payload.tags, detailTags).length > 0;\n        const removeDuplicateOf = prevTagsHaveDuplicates && !newTagsHaveDuplicates;\n        const removeDetailOf = prevTagsHaveDetail && !newTagsHaveDetail;\n        return compose(when(always(removeDuplicateOf), dissoc('duplicate-of')), when(always(removeDetailOf), dissoc('detail-of')), assoc('tags', action.payload.tags))(image);\n      });\n\n    case 'REMOVE_NOTE':\n      return updateImage(action.payload.idx, image => {\n        const updatedNotes = remove(action.payload.noteIdx, 1, propOr([], 'note', image));\n        return assoc('note', updatedNotes, image);\n      });\n\n    case 'MARK_PREVIOUS_AS_REVIEWED':\n      const updateImageList14 = mapIndex((image, idx) => {\n        if (idx <= action.payload.imageIdx) {\n          return assoc('reviewed', true, image);\n        } else {\n          return image;\n        }\n      }, getImageList(manifest));\n      return set(imageListLens, updateImageList14, manifest);\n\n    case 'UPDATE_UNCHECKED_ITEMS':\n      const getMargin = getPagination(manifest, action.payload.image0); // TODO: in the future it may depend on more elaborated checks:\n\n      let pagination_id = manifest.pagination[0].id;\n      const updateImageList15 = mapIndex((image, i) => {\n        const diff = i - action.payload.idx; // TODO: here we shouldn't change anything after the first reviewed image,\n        // even if some images are not reviewed\n\n        if (diff > 0 && !image.reviewed) {\n          let res = getMargin(diff);\n          let newimg = assoc('indication', res[1], image);\n\n          if (!newimg.pagination) {\n            newimg.pagination = {};\n          } // @ts-ignore\n\n\n          newimg.pagination[pagination_id] = res[0];\n          return newimg;\n        } else {\n          return image;\n        }\n      }, getImageList(manifest));\n      return set(imageListLens, updateImageList15, manifest);\n\n    case 'HANDLE_PAGINATION_PREDICTION':\n      const imageList2 = getImageList(manifest);\n\n      const rearrangeImage = (imageId, idx) => {\n        const {\n          image,\n          images\n        } = reduce((acc, val) => {\n          // @ts-ignore\n          if (val.id === imageId) {\n            const valToRemove = assoc('remove', true, val);\n            acc.image = val;\n            acc.images.push(valToRemove);\n            return acc;\n          }\n\n          acc.images.push(val);\n          return acc;\n        }, {\n          image: null,\n          images: []\n        }, imageList2);\n        return reject(propEq('remove', true), insert(inc(idx), image, images));\n      }; // @ts-ignore\n\n\n      const cmp = curry(getComparator)(manifest); // TODO: the comparator is currently for the whole manifest, it might be\n      // relevant to have it just for the specific image\n\n      const idx = findIndex( // @ts-ignore\n      img => cmp(action.payload.image.pagination, img.pagination) < 0, imageList2);\n\n      if (idx !== -1) {\n        return set(imageListLens, rearrangeImage(action.payload.image.id, dec(idx)), manifest);\n      } else {\n        return manifest;\n      }\n\n    default:\n      return manifest;\n  }\n});","map":{"version":3,"sources":["/Users/aplchian/Documents/code/buda-next/redux/reducers/index.ts"],"names":["addIndex","always","append","assoc","compose","curry","dec","dissoc","findIndex","inc","insert","intersection","lensPath","map","prop","propEq","propOr","reduce","reject","remove","set","view","when","uuidv4","getPagination","getComparator","mapIndex","imageListLens","getImageList","manifest","imggroup","attribution","changes","note","pagination","rev","status","view1","imagelist","isDefault","volumeData","defaultLanguage","appData","bvmt","action","updateImage","idx","fn","imageList","image","type","payload","key","value","hide","ofField","updatedNotes","sectionLens","id","reviewed","val","name","defaultMissingImage","updateImageList9","direction","i","hidden","duplicateTags","detailTags","currentTags","prevTagsHaveDuplicates","length","prevTagsHaveDetail","newTagsHaveDuplicates","tags","newTagsHaveDetail","removeDuplicateOf","removeDetailOf","noteIdx","updateImageList14","imageIdx","getMargin","image0","pagination_id","updateImageList15","diff","res","newimg","imageList2","rearrangeImage","imageId","images","acc","valToRemove","push","cmp","img"],"mappings":"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","sourcesContent":["import {\n    addIndex,\n    always,\n    append,\n    assoc,\n    compose,\n    curry,\n    dec,\n    dissoc,\n    findIndex,\n    inc,\n    insert,\n    intersection,\n    lensPath,\n    map,\n    prop,\n    propEq,\n    propOr,\n    reduce,\n    reject,\n    remove,\n    set,\n    view,\n    when,\n} from 'ramda'\nimport { Buda } from '../../../buda/types'\nimport uuidv4 from 'uuid/v4'\nimport getPagination from '../../utils/pagination-prediction'\nimport { getComparator } from '../../utils/pagination-comparators'\n\nconst mapIndex = addIndex(map)\n\nconst imageListLens = lensPath(['view', 'view1', 'imagelist'])\nconst getImageList = (manifest: any) => {\n    return (view(imageListLens, manifest) as Buda.Image[]) || []\n}\n\nexport default (\n    manifest: Buda.Manifest = {\n        'default-view': 'view1',\n        imggroup: '',\n        'spec-version': '',\n        'viewing-direction': '',\n        'volume-label': [],\n        attribution: [],\n        changes: [],\n        note: [],\n        pagination: [],\n        rev: '',\n        status: '',\n        view: { view1: { imagelist: [] } },\n        isDefault: true,\n        volumeData: {\n            defaultLanguage: 'en',\n        },\n        appData: {\n            bvmt: {\n                'default-ui-string-lang': 'en',\n            },\n        },\n    },\n    action: {\n        type: any\n        payload: {\n            image0: any\n            idx: number\n            note?: Buda.Image['note']\n            ofField?: string\n            value?: any\n            key?: any\n            imageId?: any\n            manifest?: any\n            hide?: Buda.Image['hide']\n            e?: any\n            i?: number\n            val?: { name: any }\n            direction?: 'before' | 'after'\n            tags?: readonly string[]\n            tag?: string\n            noteIdx?: number\n            imageIdx?: number\n            image?: any\n        }\n    }\n) => {\n    const updateImage = (idx: number, fn: (image: any) => any) => {\n        const imageList = getImageList(manifest)\n        const image = imageList[idx]\n        imageList[idx] = fn(image)\n        return set(imageListLens, imageList, manifest)\n    }\n    switch (action.type) {\n        case 'SET_MANIFEST':\n            return action.payload.manifest\n        case 'SET_UI_LANGUAGE':\n            return set(\n                lensPath(['appData', 'bvmt', 'default-ui-string-lang']),\n                action.payload,\n                manifest\n            )\n        case 'UPDATE_IMAGE_VALUE':\n            return updateImage(action.payload.idx, (image: Buda.Image) =>\n                assoc(action.payload.key, action.payload.value, image)\n            )\n        case 'HIDE_CARD_IN_MANIFEST': {\n            return updateImage(action.payload.idx, (image: Buda.Image) =>\n                compose(\n                    assoc('collapsed', action.payload.hide),\n                    // @ts-ignore\n                    assoc('hide', action.payload.hide)\n                    // @ts-ignore\n                )(image)\n            )\n        }\n\n        case 'REMOVE_OF_FIELD':\n            return updateImage(action.payload.idx, (image: Buda.Image) =>\n                dissoc(action.payload.ofField, image)\n            )\n\n        case 'ADD_NOTE':\n            return updateImage(action.payload.idx, (image: Buda.Image) => {\n                const updatedNotes = append(\n                    action.payload.note,\n                    propOr([], 'note', image)\n                )\n                return assoc('note', updatedNotes, image)\n            })\n\n        case 'UPDATE_IMAGE_SECTION':\n            return updateImage(action.payload.idx, (image: Buda.Image) => {\n                const sectionLens = lensPath([\n                    'pagination',\n                    manifest.pagination[0].id,\n                    action.payload.key,\n                ])\n                return set(sectionLens, action.payload.value, image)\n            })\n\n        case 'TOGGLE_REVIEW':\n            return updateImage(action.payload.idx, (image: Buda.Image) => {\n                const reviewed = prop('reviewed', image)\n                return compose(\n                    image =>\n                        !reviewed ? assoc('collapsed', true, image) : image,\n                    assoc('reviewed', !reviewed)\n                )(image)\n            })\n\n        case 'UPDATE_OF_FIELD':\n            return updateImage(action.payload.idx, (image: Buda.Image) =>\n                assoc(action.payload.key, action.payload.val.name, image)\n            )\n        case 'INSERT_MISSING':\n            const defaultMissingImage = {\n                id: uuidv4(),\n                type: 'missing',\n            } as Buda.Image\n            var updateImageList9\n            if (action.payload.direction === 'before') {\n                updateImageList9 = insert(\n                    action.payload.i,\n                    defaultMissingImage,\n                    getImageList(manifest)\n                )\n            } else if (action.payload.direction === 'after') {\n                updateImageList9 = insert(\n                    action.payload.i + 1,\n                    defaultMissingImage,\n                    getImageList(manifest)\n                )\n            }\n            return set(imageListLens, updateImageList9, manifest)\n\n        case 'TOGGLE_COLLAPSE_IMAGE':\n            return updateImage(action.payload.idx, (image: Buda.Image) => {\n                const hidden = !!prop('collapsed', image)\n                return assoc('collapsed', !hidden, image)\n            })\n\n        case 'SET_IMAGE_VIEW':\n            return set(\n                lensPath(['appData', 'bvmt', 'preview-image-view']),\n                action.payload.value,\n                manifest\n            )\n        case 'ADD_IMAGE_TAG':\n            return updateImage(action.payload.idx, (image: Buda.Image) => {\n                const duplicateTags = ['T0018', 'T0017']\n                const detailTags = ['T0016']\n                const currentTags = propOr(\n                    [],\n                    'tags',\n                    image\n                ) as readonly string[]\n                const prevTagsHaveDuplicates =\n                    intersection(currentTags, duplicateTags).length > 0\n                const prevTagsHaveDetail =\n                    intersection(currentTags, detailTags).length > 0\n\n                const newTagsHaveDuplicates =\n                    intersection(action.payload.tags, duplicateTags).length > 0\n\n                const newTagsHaveDetail =\n                    intersection(action.payload.tags, detailTags).length > 0\n\n                const removeDuplicateOf =\n                    prevTagsHaveDuplicates && !newTagsHaveDuplicates\n                const removeDetailOf = prevTagsHaveDetail && !newTagsHaveDetail\n\n                return compose(\n                    when(always(removeDuplicateOf), dissoc('duplicate-of')),\n                    when(always(removeDetailOf), dissoc('detail-of')),\n                    assoc('tags', action.payload.tags)\n                )(image)\n            })\n\n        case 'REMOVE_NOTE':\n            return updateImage(action.payload.idx, (image: Buda.Image) => {\n                const updatedNotes = remove(\n                    action.payload.noteIdx,\n                    1,\n                    propOr([], 'note', image)\n                )\n                return assoc('note', updatedNotes, image)\n            })\n\n        case 'MARK_PREVIOUS_AS_REVIEWED':\n            const updateImageList14 = mapIndex((image, idx) => {\n                if (idx <= action.payload.imageIdx) {\n                    return assoc('reviewed', true, image)\n                } else {\n                    return image\n                }\n            }, getImageList(manifest))\n            return set(imageListLens, updateImageList14, manifest)\n\n        case 'UPDATE_UNCHECKED_ITEMS':\n            const getMargin = getPagination(manifest, action.payload.image0)\n            // TODO: in the future it may depend on more elaborated checks:\n            let pagination_id = manifest.pagination[0].id\n\n            const updateImageList15 = mapIndex(\n                (image: Buda.Image, i: number) => {\n                    const diff = i - action.payload.idx\n                    // TODO: here we shouldn't change anything after the first reviewed image,\n                    // even if some images are not reviewed\n                    if (diff > 0 && !image.reviewed) {\n                        let res = getMargin(diff)\n                        let newimg = assoc('indication', res[1], image)\n                        if (!newimg.pagination) {\n                            newimg.pagination = {}\n                        }\n                        // @ts-ignore\n                        newimg.pagination[pagination_id] = res[0]\n                        return newimg\n                    } else {\n                        return image\n                    }\n                },\n                getImageList(manifest)\n            )\n            return set(imageListLens, updateImageList15, manifest)\n        case 'HANDLE_PAGINATION_PREDICTION':\n            const imageList2 = getImageList(manifest)\n            const rearrangeImage = (imageId: string, idx: number) => {\n                const { image, images } = reduce(\n                    (acc, val) => {\n                        // @ts-ignore\n                        if (val.id === imageId) {\n                            const valToRemove = assoc('remove', true, val)\n                            acc.image = val\n                            acc.images.push(valToRemove)\n                            return acc\n                        }\n                        acc.images.push(val)\n                        return acc\n                    },\n                    {\n                        image: null,\n                        images: [],\n                    },\n                    imageList2\n                )\n                return reject(\n                    propEq('remove', true),\n                    insert(inc(idx), image, images)\n                )\n            }\n            // @ts-ignore\n            const cmp = curry(getComparator)(manifest)\n            // TODO: the comparator is currently for the whole manifest, it might be\n            // relevant to have it just for the specific image\n            const idx = findIndex(\n                // @ts-ignore\n                img => cmp(action.payload.image.pagination, img.pagination) < 0,\n                imageList2\n            )\n            if (idx !== -1) {\n                return set(\n                    imageListLens,\n                    rearrangeImage(action.payload.image.id, dec(idx)),\n                    manifest\n                )\n            } else {\n                return manifest\n            }\n        default:\n            return manifest\n    }\n}\n"]},"metadata":{},"sourceType":"module"}