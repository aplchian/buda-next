{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aplchian/Documents/code/buda-next/components/TypeSelect.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { __, complement, compose, find, has, includes, lensPath, map, propEq, propOr, reject, view } from 'ramda';\nimport TextField from '@material-ui/core/TextField';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { removeOfField, updateOfField } from '../redux/actions/manifest';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    formControl: {\n      margin: '0 1em 1em 0',\n      minWidth: 120\n    }\n  };\n});\n\nvar TypeSelect = function TypeSelect(props) {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var duplicateTags = ['T0018', 'T0017'];\n  var detailTags = ['T0016'];\n  var duplicateTag = find( // @ts-ignore\n  includes(__, duplicateTags), propOr([], 'tags', props)); // @ts-ignore\n\n  var detailTag = find(includes(__, detailTags), propOr([], 'tags', props));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex w-full\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!!duplicateTag && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          className: classes.formControl,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              autoComplete: true,\n              options: reject(propEq('id', props.id), props.duplicateImageOptions),\n              style: {\n                width: 250,\n                marginLeft: 0\n              },\n              autoSelect: true,\n              autoHighlight: true,\n              value: props.duplicateOf,\n              getOptionLabel: function getOptionLabel(_ref) {\n                var name = _ref.name;\n                return name;\n              },\n              onChange: function onChange(event, newValue) {\n                if (!newValue) {\n                  props.dispatch(removeOfField(props.i, 'duplicate-of'));\n                } else {\n                  props.dispatch(updateOfField(props.i, newValue, 'duplicate-of'));\n                }\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n                  helperText: t('Duplicate of File')\n                }, params), {}, {\n                  fullWidth: true\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 45\n                }, _this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false), !!detailTag && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          className: classes.formControl,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              autoComplete: true,\n              options: reject(propEq('id', props.id), props.duplicateImageOptions),\n              style: {\n                width: 250\n              },\n              autoSelect: true,\n              autoHighlight: true,\n              value: props.duplicateOf,\n              getOptionLabel: function getOptionLabel(_ref2) {\n                var name = _ref2.name;\n                return name;\n              },\n              onChange: function onChange(event, newValue) {\n                if (!newValue) {\n                  props.dispatch(removeOfField(props.i, 'detail-of'));\n                } else {\n                  props.dispatch(updateOfField(props.i, newValue, 'detail-of'));\n                }\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n                  helperText: t('Detail of File')\n                }, params), {}, {\n                  fullWidth: true\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 45\n                }, _this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TypeSelect, \"n/DmXZxC8z3ljyLD00VaacIw92Y=\", false, function () {\n  return [useTranslation, useStyles];\n});\n\n_c = TypeSelect;\nTypeSelect.whyDidYouRender = false;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var imageListLens = lensPath(['view', 'view1', 'imagelist']);\n  var imageList = view(imageListLens, state.manifest) || [];\n  return {\n    duplicateImageOptions: compose(map(function (_ref3) {\n      var id = _ref3.id,\n          filename = _ref3.filename;\n      return {\n        id: id,\n        name: filename\n      };\n    }), // @ts-ignore\n    reject(complement(has)('filename')) // @ts-ignore\n    )(imageList)\n  };\n};\n\nexport default connect(mapStateToProps)(TypeSelect);\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeSelect\");","map":{"version":3,"sources":["/Users/aplchian/Documents/code/buda-next/components/TypeSelect.tsx"],"names":["React","FormControl","Autocomplete","__","complement","compose","find","has","includes","lensPath","map","propEq","propOr","reject","view","TextField","useTranslation","makeStyles","connect","removeOfField","updateOfField","useStyles","theme","formControl","margin","minWidth","TypeSelect","props","t","classes","duplicateTags","detailTags","duplicateTag","detailTag","id","duplicateImageOptions","width","marginLeft","duplicateOf","name","event","newValue","dispatch","i","params","whyDidYouRender","mapStateToProps","state","imageListLens","imageList","manifest","filename"],"mappings":"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","sourcesContent":["import React from 'react'\nimport FormControl from '@material-ui/core/FormControl'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { __, complement, compose, find, has, includes, lensPath, map, propEq, propOr, reject, view } from 'ramda'\nimport TextField from '@material-ui/core/TextField'\nimport { useTranslation } from 'react-i18next'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { connect } from 'react-redux'\nimport { removeOfField, updateOfField } from '../redux/actions/manifest'\nimport { Buda } from '../../buda/types'\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        margin: '0 1em 1em 0',\n        minWidth: 120,\n    },\n}))\n\nconst TypeSelect = (props: {\n    id: any\n    duplicateImageOptions: readonly Record<'id', any>[]\n    duplicateOf: any\n    tags: any\n    i?: any\n    dispatch: any\n}) => {\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const duplicateTags = ['T0018', 'T0017']\n    const detailTags = ['T0016']\n    const duplicateTag = find(\n        // @ts-ignore\n        includes(__, duplicateTags),\n        propOr([], 'tags', props)\n    )\n    // @ts-ignore\n    const detailTag = find(includes(__, detailTags), propOr([], 'tags', props))\n    return (\n        <div className=\"flex w-full\">\n            <div>\n                {!!duplicateTag && (\n                    <>\n                        <FormControl className={classes.formControl}>\n                            <div>\n                                <Autocomplete\n                                    autoComplete\n                                    options={reject(\n                                        propEq('id', props.id),\n                                        props.duplicateImageOptions\n                                    )}\n                                    style={{ width: 250, marginLeft: 0 }}\n                                    autoSelect\n                                    autoHighlight\n                                    value={props.duplicateOf}\n                                    getOptionLabel={({ name }) => name}\n                                    onChange={(event: any, newValue: any) => {\n                                        if (!newValue) {\n                                            props.dispatch(\n                                                removeOfField(\n                                                    props.i,\n                                                    'duplicate-of'\n                                                )\n                                            )\n                                        } else {\n                                            props.dispatch(\n                                                updateOfField(\n                                                    props.i,\n                                                    newValue,\n                                                    'duplicate-of'\n                                                )\n                                            )\n                                        }\n                                    }}\n                                    renderInput={params => {\n                                        return (\n                                            <TextField\n                                                helperText={t(\n                                                    'Duplicate of File'\n                                                )}\n                                                {...params}\n                                                fullWidth\n                                            />\n                                        )\n                                    }}\n                                />\n                            </div>\n                        </FormControl>\n                    </>\n                )}\n                {!!detailTag && (\n                    <>\n                        <FormControl className={classes.formControl}>\n                            <div>\n                                <Autocomplete\n                                    autoComplete\n                                    options={reject(\n                                        propEq('id', props.id),\n                                        props.duplicateImageOptions\n                                    )}\n                                    style={{ width: 250 }}\n                                    autoSelect\n                                    autoHighlight\n                                    value={props.duplicateOf}\n                                    getOptionLabel={({ name }) => name}\n                                    onChange={(event: any, newValue: any) => {\n                                        if (!newValue) {\n                                            props.dispatch(\n                                                removeOfField(\n                                                    props.i,\n                                                    'detail-of'\n                                                )\n                                            )\n                                        } else {\n                                            props.dispatch(\n                                                updateOfField(\n                                                    props.i,\n                                                    newValue,\n                                                    'detail-of'\n                                                )\n                                            )\n                                        }\n                                    }}\n                                    renderInput={params => {\n                                        return (\n                                            <TextField\n                                                helperText={t('Detail of File')}\n                                                {...params}\n                                                fullWidth\n                                            />\n                                        )\n                                    }}\n                                />\n                            </div>\n                        </FormControl>\n                    </>\n                )}\n            </div>\n        </div>\n    )\n}\n\nTypeSelect.whyDidYouRender = false\n\nconst mapStateToProps = function(state: any) {\n    const imageListLens = lensPath(['view', 'view1', 'imagelist'])\n    const imageList = (view(imageListLens, state.manifest) as Buda.Image[]) || []\n    return {\n        duplicateImageOptions: compose(\n            map(({ id, filename }) => ({ id, name: filename })),\n            // @ts-ignore\n            reject(complement(has)('filename'))\n            // @ts-ignore\n        )(imageList)\n    }\n}\n\nexport default connect(mapStateToProps)(TypeSelect)\n"]},"metadata":{},"sourceType":"module"}